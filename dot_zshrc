# Prevent logging out with `Ctrl-D`
setopt IGNOREEOF

# Env {{{
# export TRANSPARENT_TERM=1
local cache_dir=${XDG_CACHE_HOME:-$HOME/.cache}
mkdir -p $cache_dir
# End of Env }}}

# LOCALE {{{
# export LC_TIME=en_US.utf-8
# export LANG=ja_JP.utf-8
# End of LOCALE }}}

# Colored
autoload -Uz colors && colors

# Completion {{{
# Activate shell completion
autoload -Uz compinit && compinit

# menued and select prompt
zstyle ':completion:*' menu true select
# do not auto-complete
zstyle ':completion:*:rm:*' menu false
# match lower and upper
zstyle ':completion:*:(cd|less):*' matcher 'm:{a-z}={A-Z}'
# End of Completion }}}

# 他のターミナルとヒストリーを共有
setopt share_history

# ヒストリーに重複を表示しない
setopt histignorealldups

HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000

# cdコマンドを省略して、ディレクトリ名のみの入力で移動
setopt auto_cd

# 自動でpushdを実行
setopt auto_pushd

# pushdから重複を削除
setopt pushd_ignore_dups

# コマンドミスを修正
setopt correct

# Alias {{{
alias -g @l='| less'
alias -g @h='| head'
alias -g @g='| grep'
alias -g @gi='| grep -ri'

source $HOME/.aliases
# End of Alias }}}

# cdの後にlsを実行
# chpwd() { ls -ltr --color=auto }

# どこからでも参照できるディレクトリパス
cdpath=(~)

### Added by Zinit's installer {{{
if [[ ! -f $HOME/.zinit/bin/zinit.zsh ]]; then
	print -P "%F{33}▓▒░ %F{220}Installing %F{33}DHARMA%F{220} Initiative Plugin Manager (%F{33}zdharma/zinit%F{220})…%f"
	command mkdir -p "$HOME/.zinit" && command chmod g-rwX "$HOME/.zinit"
	command git clone --depth 1 https://github.com/zdharma-continuum/zinit "$HOME/.zinit/bin" && \
		print -P "%F{33}▓▒░ %F{34}Installation successful.%f%b" || \
		print -P "%F{160}▓▒░ The clone has failed.%f%b"
fi

source "$HOME/.zinit/bin/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# Load a few important annexes, without Turbo
# (this is currently required for annexes)
zinit light-mode for \
	@zdharma-continuum/zinit-annex-rust \
	@zdharma-continuum/zinit-annex-readurl \
	@zdharma-continuum/zinit-annex-patch-dl \
	@zdharma-continuum/zinit-annex-bin-gem-node \
	@zdharma-continuum/zinit-annex-binary-symlink

### End of Zinit's installer chunk }}}

zinit wait"1c" lucid \
	blockf light-mode for \
	@zsh-users/zsh-completions \
	@zsh-users/zsh-autosuggestions \
	@zsh-users/zaw \
	@zdharma-continuum/history-search-multi-word


# rust
zinit wait"0a" lucid \
	id-as"rust" rustup as"command" \
	pick"bin/rustc" \
	atload="export CARGO_HOME=$PWD RUSTUP_HOME=$PWD/rustup" \
	for @zdharma-continuum/null

# minimum propmt
zinit \
	compile"(pure|async).zsh" pick"async.zsh" src"pure.zsh" \
	for @sindresorhus/pure

# zinit pack-ice requires `jq`
zinit wait"0a" lucid \
	from"gh-r" sbin"* -> jq" nocompile \
	for @jqlang/jq

# alt `ls`, `tree`
zinit from"gh-r" lbin"!" nocompile aliases \
	atload"!(){
		setopt no_aliases;
		alias l='eza -blF';
		alias la='eza -abghilmu';
		alias ll='eza -al';
		alias ls='eza --git --group-directories-first';
		alias tree='eza --tree'}" \
	if"[[ $VENDOR != apple ]]" \
	light-mode for @eza-community/eza

# enhanced `cd`
zinit wait"1c" lucid \
	from"gh-r" as"program" \
	atclone"./zoxide init --cmd j zsh > init.zsh" \
	atpull"%atclone" \
	src"init.zsh" nocompile"!" \
	light-mode for @ajeetdsouza/zoxide

zinit wait"2" lucid \
	as"completion" for \
	src"contrib/completion/zsh/_docker" depth"1" @docker/cli

# git repository manager
zinit wait"0c" lucid \
	from"gh-r" mv"ghq* -> ghq" sbin"ghq" \
	cp"misc/zsh/_ghq -> _ghq" \
	light-mode for @x-motemen/ghq


# alt `find`
zinit wait"1c" lucid \
	blockf nocompletions \
	from"gh-r" as"program" mv"fd* -> fd" \
	sbin"fd/fd" \
	atclone'
		chown -R $(id -nu):$(id -nu) .;
		zinit creinstall -q sharkdp/fd;' \
	for @sharkdp/fd
#		mkdir -p $ZPFX/{bin,man/man1};
#		cp -vf fd/autocomplete/_fd _fd;
#		cp -vf fd/fd.1 $ZPFX/man/man1/fd.1;}' \

# alt `cat`
zinit wait"1c" lucid \
	blockf nocompletions nocompile aliases \
	from"gh-r" as"program" mv"bat* -> bat" \
	pick"bat/bat" cp"bat/autocomplete/bat.zsh -> _bat" \
	atload"
		setopt no_aliases;
		alias cat=bat" \
	for @sharkdp/bat

zinit wait"1c" lucid \
	blockf nocompletions \
	from"gh-r" as"program" \
	mv"gh* -> gh" \
	pick"gh/bin/gh" \
	atclone'
		mkdir -p $ZPFX/man/man1;
		cp -vf gh/share/man/man1/* $ZPFX/man/man1;' \
	atload'eval "$(gh completion -s zsh)"' \
	for @cli/cli
# TODO: cached completion file

# alt `grep`
zinit wait"1c" lucid \
	blockf nocompletions \
	from"gh-r" as"program" mv"ripgrep* -> rg" \
	pick"rg/rg" cp"rg/complete/_rg -> _rg" \
	atclone'
		chown -R $(id -nu):$(id -nu) .;
		zinit creinstall -q BurntSushi/ripgrep;' \
	atpull'%atclone' \
	for @BurntSushi/ripgrep

zinit wait lucid \
	configure"--disable-utf8proc" make \
	for @tmux/tmux

# tmux plugin manager
zinit wait lucid \
	as"null" id-as"tpm" \
	atclone"!(){
		mkdir -p $HOME/.tmux/plugins;
		ln -sf $ZINIT[PLUGINS_DIR]/tpm $HOME/.tmux/plugins/tpm;}" \
	atpull'%atclone' \
	for @tmux-plugins/tpm

zinit wait"2" pack"bgn" for fzf

# for bash_completion
autoload -U +X bashcompinit && bashcompinit

# fzf
# export FZF_DEFAULT_OPTS='--height 40% --reverse --border'
# awscli
complete -C '/usr/local/bin/aws_completer' aws

DISTRO=$(awk -F= '/^ID=/{print $2}' /etc/os-release)

# ghq fzf
function ghq-fzf() {
	local src=$(ghq list | fzf-tmux -p 80% --preview "${cmd_bat} --color=always --style=header,grid --line-range :80 $(ghq root)/{}/README.*")
	if [ -n "$src" ]; then
		BUFFER="cd $(ghq root)/$src && tmux rename-window $(basename $src)"
		zle accept-line
	fi
	zle -R -c
}
zle -N ghq-fzf

function ghq-updated-fzf() {
	local sorted=$(ghq list | python -c "import os; import sys; print(''.join(sorted(sys.stdin.readlines(), key=lambda path: os.stat(f'$(ghq root)/{path.strip()}').st_mtime, reverse=True)))")
	local src=$(echo $sorted | fzf-tmux -p 80% --preview "${cmd_bat} --color=always --style=header,grid --line-range :80 $(ghq root)/{}/README.*")
	if [ -n "$src" ]; then
		BUFFER="cd $(ghq root)/$src && tmux rename-window $(basename $src)"
		zle accept-line
	fi
	zle -R -c
}
zle -N ghq-updated-fzf

function git-status() {
	if [ "$(git rev-parse --is-inside-work-tree 2> /dev/null)" = 'true' ]; then
		echo git status -sb
		git status -sb
	fi
	zle -R
}
zle -N git-status

# fzf-select-ghq-tmux
function ghq-tmux() {
  local selected_dir=$(ghq list -p | fzf-tmux -p 80% --reverse --query "$LBUFFER" --preview "${cmd_bat} --color=always --style=plain \$(find {} -maxdepth 1 | grep -i -e 'readme\(.\.*\)\?')")
  if [ -n "$selected_dir" ]; then
	local repo=$(basename ${selected_dir})
	BUFFER="tmux neww -S -n $repo -c $selected_dir"
	zle accept-line
  fi
}
zle -N ghq-tmux

# yq
yq() {
	docker run --rm -i -v "${PWD}":/workdir mikefarah/yq "$@"
}

# tty
export GPG_TTY=$(tty)
complete -o nospace -C /usr/local/bin/bit bit

# The next line enables shell command completion for gcloud.
if [ -f '$HOME/google-cloud-sdk/path.zsh.inc' ]; then . '$HOME/google-cloud-sdk/path.zsh.inc'; fi
if [ -f '$HOME/google-cloud-sdk/completion.zsh.inc' ]; then . '$HOME/google-cloud-sdk/completion.zsh.inc'; fi
if [ -f '$HOME/.cache/paru/clone/google-cloud-sdk/pkg/google-cloud-sdk/opt/google-cloud-sdk/path.zsh.inc' ]; then . '$HOME/.cache/paru/clone/google-cloud-sdk/pkg/google-cloud-sdk/opt/google-cloud-sdk/path.zsh.inc'; fi
if [ -f '$HOME/.cache/paru/clone/google-cloud-sdk/pkg/google-cloud-sdk/opt/google-cloud-sdk/completion.zsh.inc' ]; then . '$HOME/.cache/paru/clone/google-cloud-sdk/pkg/google-cloud-sdk/opt/google-cloud-sdk/completion.zsh.inc'; fi

# cdr, add-zsh-hook を有効にする
autoload -Uz chpwd_recent_dirs cdr add-zsh-hook && add-zsh-hook chpwd chpwd_recent_dirs

# cdr の設定
shell_cache_dir="$cache_dir/shell"
chpwd_recent_dirs="$shell_cache_dir/chpwd-recent-dirs"
zstyle ':completion:*' recent-dirs-insert both
zstyle ':chpwd:*' recent-dirs-max 500
zstyle ':chpwd:*' recent-dirs-default true
zstyle ':chpwd:*' recent-dirs-file $chpwd_recent_dirs
zstyle ':chpwd:*' recent-dirs-pushd true
[ ! -e $chpwd_recent_dirs ] && mkdir -p $cache_dir; touch $chpwd_recent_dirs
unset shell_cashe_dir chpwd_recent_dirs

complete -o nospace -C /usr/bin/terraform terraform

# bindkeys {{{
# reset
bindkey -d
# emacs
bindkey -e
# ghq
bindkey '^g^g' ghq-fzf
bindkey '^gg' ghq-updated-fzf
bindkey '^g^t' ghq-tmux
bindkey '^gt' ghq-tmux
# git staths
bindkey '^g^z' git-status
bindkey '^gz' git-status
# util key
bindkey '^[[H' beginning-of-line
bindkey '^[[F' end-of-line
bindkey '^[[3~' delete-char
# zaw
bindkey '^@' zaw-cdr
bindkey '^r' zaw-history
bindkey '^f^f' zaw-git-files
bindkey '^ff' zaw-git-files
bindkey '^f^b' zaw-git-branches
bindkey '^fb' zaw-git-branches
bindkey '^f^p' zaw-process
bindkey '^fp' zaw-process
bindkey '^t' zaw-tmux
# }}}

# tabtab source for packages
# uninstall by removing these lines
[[ -f ~/.config/tabtab/__tabtab.zsh ]] && . ~/.config/tabtab/__tabtab.zsh || true

[ -f ~/.zshrc.local ] && source ~/.zshrc.local
function gi() { curl -sLw "\n" https://www.toptal.com/developers/gitignore/api/$@ ;}
